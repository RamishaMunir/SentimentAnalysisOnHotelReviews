#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Oct 26, 2021 03:20:12 AM
import sys
import tkinter.messagebox
import tkinter.ttk as ttk
from tkinter import *
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import analyzers as ana
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import SupportUI as unknown_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Sentiments_Analysis (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Sentiments_Analysis(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Sentiments_Analysis (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Sentiments_Analysis():
    global w
    w.destroy()
    w = None


class Sentiments_Analysis:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        font10 = "-family {Segoe UI} -size 14 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {Segoe UI} -size 9 -weight normal -slant " \
                 "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"

        top.geometry("600x450+635+210")
        top.title("Sentiments Analysis")
        top.configure(background="#d9d9d9")

        self.headlbl = Label(top)
        self.headlbl.place(relx=0.13, rely=0.02, height=36, width=442)
        self.headlbl.configure(background="#d9d9d9")
        self.headlbl.configure(disabledforeground="#a3a3a3")
        self.headlbl.configure(font=font10)
        self.headlbl.configure(foreground="#000000")
        self.headlbl.configure(text='''Sentiment Analysis on Hotel Reviews''')
        self.headlbl.configure(width=442)

        self.idxlbl = Label(top)
        self.idxlbl.place(relx=0.25, rely=0.11, height=26, width=273)
        self.idxlbl.configure(background="#d9d9d9")
        self.idxlbl.configure(disabledforeground="#a3a3a3")
        self.idxlbl.configure(foreground="#000000")
        self.idxlbl.configure(text='''Enter Index from Range (0-20000):''')
        self.idxlbl.configure(width=273)

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.37, rely=0.18, height=34, relwidth=0.22)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=134)

        self.ssbtn = Button(top)
        self.ssbtn.place(relx=0.23, rely=0.27, height=33, width=116)
        self.ssbtn.configure(activebackground="#d9d9d9")
        self.ssbtn.configure(activeforeground="#000000")
        self.ssbtn.configure(background="#d9d9d9")
        self.ssbtn.configure(disabledforeground="#a3a3a3")
        self.ssbtn.configure(font=font9)
        self.ssbtn.configure(foreground="#000000")
        self.ssbtn.configure(highlightbackground="#d9d9d9")
        self.ssbtn.configure(highlightcolor="black")
        self.ssbtn.configure(pady="0")
        self.ssbtn.configure(text='''SentiStrength''')
        self.ssbtn.configure(width=116)
        self.ssbtn.configure(command=self.ss_rating)

        self.vaderbtn = Button(top)
        self.vaderbtn.place(relx=0.52, rely=0.27, height=33, width=116)
        self.vaderbtn.configure(activebackground="#d9d9d9")
        self.vaderbtn.configure(activeforeground="#000000")
        self.vaderbtn.configure(background="#d9d9d9")
        self.vaderbtn.configure(disabledforeground="#a3a3a3")
        self.vaderbtn.configure(font=font9)
        self.vaderbtn.configure(foreground="#000000")
        self.vaderbtn.configure(highlightbackground="#d9d9d9")
        self.vaderbtn.configure(highlightcolor="black")
        self.vaderbtn.configure(pady="0")
        self.vaderbtn.configure(text='''VaderNLTK''')
        self.vaderbtn.configure(command=self.vader_rating)

        self.plotbtn = Button(top)
        self.plotbtn.place(relx=0.1, rely=0.4, height=63, width=166)
        self.plotbtn.configure(activebackground="#d9d9d9")
        self.plotbtn.configure(activeforeground="#000000")
        self.plotbtn.configure(background="#d9d9d9")
        self.plotbtn.configure(disabledforeground="#a3a3a3")
        self.plotbtn.configure(font=font9)
        self.plotbtn.configure(foreground="#000000")
        self.plotbtn.configure(highlightbackground="#d9d9d9")
        self.plotbtn.configure(highlightcolor="black")
        self.plotbtn.configure(pady="0")
        self.plotbtn.configure(text='''Generate Plot''')
        self.plotbtn.configure(width=166)
        self.plotbtn.configure(command=ana.normalize_and_plot)


        # self.Canvas1 = Canvas(top)
        # self.Canvas1.place(relx=0.68, rely=0.4, relheight=0.18, relwidth=0.22)
        # self.Canvas1.configure(background="#d9d9d9")
        # self.Canvas1.configure(borderwidth="2")
        # self.Canvas1.configure(insertbackground="black")
        # self.Canvas1.configure(relief=RIDGE)
        # self.Canvas1.configure(selectbackground="#c4c4c4")
        # self.Canvas1.configure(selectforeground="black")
        # self.Canvas1.configure(width=125)
        # # plot1 = FigureCanvasTkAgg(ana.fig, top)
        # # plot1.get_tk_widget().grid(row=1, column=0, columnspan=4)
        # canvas = FigureCanvasTkAgg(ana.fig, top)
        # canvas.show()
        # canvas.get_tk_widget().pack()

        self.corbtn = Button(top)
        self.corbtn.place(relx=0.6, rely=0.4, height=63, width=186)
        self.corbtn.configure(activebackground="#d9d9d9")
        self.corbtn.configure(activeforeground="#000000")
        self.corbtn.configure(background="#d9d9d9")
        self.corbtn.configure(disabledforeground="#a3a3a3")
        self.corbtn.configure(font=font9)
        self.corbtn.configure(foreground="#000000")
        self.corbtn.configure(highlightbackground="#d9d9d9")
        self.corbtn.configure(highlightcolor="black")
        self.corbtn.configure(pady="0")
        self.corbtn.configure(text='''Calculate Correlation''')
        self.corbtn.configure(width=186)
        self.corbtn.configure(command=self.correlation)

        self.testhypbtn = Button(top)
        self.testhypbtn.place(relx=0.35, rely=0.6, height=43, width=166)
        self.testhypbtn.configure(activebackground="#d9d9d9")
        self.testhypbtn.configure(activeforeground="#000000")
        self.testhypbtn.configure(background="#d9d9d9")
        self.testhypbtn.configure(disabledforeground="#a3a3a3")
        self.testhypbtn.configure(font=font11)
        self.testhypbtn.configure(foreground="#000000")
        self.testhypbtn.configure(highlightbackground="#d9d9d9")
        self.testhypbtn.configure(highlightcolor="black")
        self.testhypbtn.configure(pady="0")
        self.testhypbtn.configure(text='''Test Hypothesis 1 & 2''')
        self.testhypbtn.configure(width=166)
        self.testhypbtn.configure(command=self.test_hyp)


    def ss_rating(self):
        print("ss clicked")
        index = self.Entry1.get()
        if index != '':
            rating = ana.get_ss_rating(index)
            tkinter.messagebox.showinfo("Analysis with SentiStrength", f"Review:{rating[3]}, \n\nPostive: {rating[0]}, \nNegative {rating[1]}, \nOverall Rating {rating[2]}")

    def vader_rating(self):
        print("vader clicked")
        index = self.Entry1.get()
        if index != '':
            rating = ana.get_vader_rating(index)
            tkinter.messagebox.showinfo("Analysis with VaderNLTK", f"Review:{rating[3]}, \n\nPostive: {rating[0]}, \nNegative {rating[1]}, \nOverall Rating {rating[2]}")

    def correlation(self):
        print("correlation clicked")
        corr_raw_ss, corr_raw_vader, corr_ss_vader, corr_raw_pos_ss, corr_raw_neg_ss, corr_raw_pos_vader, corr_raw_neg_vader = ana.calculate_correlation()
        tkinter.messagebox.showinfo("Correlation",
                                    f"Correlation of User Rating vs SentiStrength: {corr_raw_ss}\n"
                                    f"Correlation of User Rating vs VaderNLTK: {corr_raw_vader}\n"
                                    f"Correlation of SentiStrength vs VaderNLTK: {corr_ss_vader}\n"
                                    f"Correlation of Positive User Rating vs SentiStrength: {corr_raw_pos_ss}\n"
                                    f"Correlation of Negative User Rating vs SentiStrength: {corr_raw_neg_ss}\n"
                                    f"Correlation of Positive User Rating vs VaderNLTK: {corr_raw_pos_vader}\n"
                                    f"Correlation of Negative User Rating vs VaderNLTK: {corr_raw_neg_vader}"
                                    )


    def test_hyp(self):
        print("hypothesis clicked")
        hyp1_stat = 'Hypothesis 1: badly written reviews are likely to be included in this ambiguous class'
        hyp2_stat = 'Hypothesis 2: ambiguous reviews are likely to be short'
        hyp1, hyp2 = ana.verify_hypothesis()
        for item, values in hyp1.iterrows():
            hyp1_stat = hyp1_stat + f"Ambigous Class: {item}, Bad Review Count: {values}"
        for item, values in hyp2.iterrows():
            hyp2_stat = hyp2_stat + f"Ambigous Class: {item}, Tokens Length: {values}"
        tkinter.messagebox.showinfo("Hypothesis Results",
                                    f"Hypothesis 1 Results:{hyp1_stat}, \nHypothesis 1 Results: {hyp2_stat}")

if __name__ == '__main__':
    vp_start_gui()



